Description: Enable WiDi for mediatek SoCs
 Enable WiDi for mediatek SoCs by making P2P frequency the same as the one
 used by STA. Based on http://review.cyanogenmod.org/#/c/92700/ .
Author: Alfonso Sanchez-Beato <alfonso.sanchez-beato@canonical.com>
Last-Update: 2016-04-29

Index: wpa-2.4/src/drivers/driver_nl80211.c
===================================================================
--- wpa-2.4.orig/src/drivers/driver_nl80211.c
+++ wpa-2.4/src/drivers/driver_nl80211.c
@@ -6514,6 +6514,23 @@ static int nl80211_signal_poll(void *pri
 	return nl80211_get_link_noise(drv, si);
 }
 
+#ifdef CONFIG_ANDROID_HAL
+#define HAL_DRIVER_ID_MTK "MTK"
+
+static int nl80211_is_driver_type(const char *vendor)
+{
+	char *driver_id;
+
+	driver_id = getenv("ANDROID_HAL_WIFI_DRIVER_ID");
+	if (driver_id == NULL)
+		return 0;
+
+	if (os_strcasecmp(driver_id, vendor) != 0)
+		return 0;
+
+	return 1;
+}
+#endif
 
 static int wpa_driver_nl80211_shared_freq(void *priv)
 {
@@ -6531,8 +6548,11 @@ static int wpa_driver_nl80211_shared_fre
 
 	dl_list_for_each(driver, &drv->global->interfaces,
 			 struct wpa_driver_nl80211_data, list) {
-		if (drv == driver ||
-		    os_strcmp(drv->phyname, driver->phyname) != 0 ||
+		if (drv == driver || (
+#ifdef CONFIG_ANDROID_HAL
+		    !nl80211_is_driver_type(HAL_DRIVER_ID_MTK) &&
+#endif
+		    os_strcmp(drv->phyname, driver->phyname) != 0) ||
 		    !driver->associated)
 			continue;
 
Index: wpa-2.4/wpa_supplicant/p2p_supplicant.c
===================================================================
--- wpa-2.4.orig/wpa_supplicant/p2p_supplicant.c
+++ wpa-2.4/wpa_supplicant/p2p_supplicant.c
@@ -38,6 +38,9 @@
 #include "p2p_supplicant.h"
 #include "wifi_display.h"
 
+#ifdef CONFIG_ANDROID_HAL
+#include "p2p/p2p_i.h"
+#endif
 
 /*
  * How many times to try to scan to find the GO before giving up on join
@@ -3823,6 +3826,23 @@ static int wpas_p2p_pick_best_used_freq(
 	return freqs[c].freq;
 }
 
+#ifdef CONFIG_ANDROID_HAL
+#define HAL_DRIVER_ID_MTK "MTK"
+
+static int wpas_is_driver_type(const char *vendor)
+{
+	char *driver_id;
+
+	driver_id = getenv("ANDROID_HAL_WIFI_DRIVER_ID");
+	if (driver_id == NULL)
+		return 0;
+
+	if (os_strcasecmp(driver_id, vendor) != 0)
+		return 0;
+
+	return 1;
+}
+#endif
 
 static u8 wpas_invitation_process(void *ctx, const u8 *sa, const u8 *bssid,
 				  const u8 *go_dev_addr, const u8 *ssid,
@@ -3834,7 +3854,7 @@ static u8 wpas_invitation_process(void *
 	struct wpa_supplicant *wpa_s = ctx;
 	struct wpa_ssid *s;
 	struct wpa_used_freq_data *freqs;
-	struct wpa_supplicant *grp;
+	struct wpa_supplicant *grp = NULL;
 	int best_freq;
 
 	if (!persistent_group) {
@@ -3925,6 +3945,33 @@ static u8 wpas_invitation_process(void *
 	}
 
 accept_inv:
+#ifdef CONFIG_ANDROID_HAL
+	if (wpas_is_driver_type(HAL_DRIVER_ID_MTK)) {
+		u8 cur_bssid[ETH_ALEN];
+
+		if (wpa_s->current_ssid && wpa_drv_get_bssid(wpa_s, cur_bssid) == 0 &&
+				wpa_s->assoc_freq) {
+			wpa_printf(MSG_DEBUG, "P2P: Trying to force channel to match "
+					"the channel we are already using");
+			*force_freq = wpa_s->assoc_freq;
+		}
+
+		best_freq = wpa_drv_shared_freq(wpa_s);
+		if (best_freq > 0) {
+			wpa_printf(MSG_DEBUG, "P2P: Trying to force channel to match "
+					"with the channel we are already using on a "
+					"shared interface");
+			*force_freq = best_freq;
+		} else {
+			if (grp && *go) {
+				*force_freq = wpa_s->current_ssid->frequency;
+				wpa_printf(MSG_DEBUG, "P2P: force freq %d MHz for already running GO ",
+						*force_freq);
+			}
+		}
+		return P2P_SC_SUCCESS;
+	}
+#endif
 	wpas_p2p_set_own_freq_preference(wpa_s, 0);
 
 	best_freq = 0;
@@ -5435,6 +5482,41 @@ static int wpas_check_freq_conflict(stru
 	unsigned int num, i;
 	struct wpa_used_freq_data *freqs;
 
+#ifdef CONFIG_ANDROID_HAL
+	if (wpas_is_driver_type(HAL_DRIVER_ID_MTK)) {
+		struct wpa_supplicant *iface;
+		int shared_freq;
+		u8 bssid[ETH_ALEN];
+		for (iface = wpa_s->global->ifaces; iface; iface = iface->next) {
+			if (!wpas_p2p_create_iface(wpa_s) && iface == wpa_s)
+				continue;
+			if (iface->current_ssid == NULL || iface->assoc_freq == 0)
+				continue;
+			if (iface->current_ssid->mode == WPAS_MODE_AP ||
+			    iface->current_ssid->mode == WPAS_MODE_P2P_GO)
+				shared_freq = iface->current_ssid->frequency;
+			else if (wpa_drv_get_bssid(iface, bssid) == 0)
+				shared_freq = iface->assoc_freq;
+			else
+				shared_freq = 0;
+
+			if (shared_freq && freq != shared_freq) {
+				wpa_printf(MSG_DEBUG, "P2P: Frequency conflict - %s "
+					   "connected on %d MHz - new connection on "
+					   "%d MHz", iface->ifname, shared_freq, freq);
+				return 1;
+			}
+		}
+
+		shared_freq = wpa_drv_shared_freq(wpa_s);
+		if (shared_freq > 0 && shared_freq != freq) {
+			wpa_printf(MSG_DEBUG, "P2P: Frequency conflict - shared "
+				   "virtual interface connected on %d MHz - new "
+				   "connection on %d MHz", shared_freq, freq);
+			return 1;
+		}
+	}
+#endif
 	if (wpas_p2p_num_unused_channels(wpa_s) > 0) {
 		/* Multiple channels are supported and not all are in use */
 		return 0;
@@ -6025,6 +6107,10 @@ int wpas_p2p_connect(struct wpa_supplica
 		     int ht40, int vht)
 {
 	int force_freq = 0, pref_freq = 0;
+#ifdef CONFIG_ANDROID_HAL
+	int oper_freq = 0;
+	u8  bssid[ETH_ALEN];
+#endif
 	int ret = 0, res;
 	enum wpa_driver_if_type iftype;
 	const u8 *if_addr;
@@ -6105,12 +6191,66 @@ int wpas_p2p_connect(struct wpa_supplica
 		return ret;
 	}
 
+#ifdef CONFIG_ANDROID_HAL
+	if (wpas_is_driver_type(HAL_DRIVER_ID_MTK)) {
+		/* Config: the legacy & p2p must work on the single channel */
+		if (wpa_s->current_ssid && wpa_drv_get_bssid(wpa_s, bssid) == 0 &&
+		    wpa_s->assoc_freq)
+			oper_freq = wpa_s->assoc_freq;
+		else {
+			oper_freq = wpa_drv_shared_freq(wpa_s);
+			if (oper_freq < 0)
+				oper_freq = 0;
+		}
+
+		if (freq > 0) {
+			if (!p2p_supported_freq(wpa_s->global->p2p, freq)) {
+				wpa_printf(MSG_DEBUG, "P2P: The forced channel "
+					   "(%u MHz) is not supported for P2P uses",
+					   freq);
+				return -3;
+			}
+
+			if (oper_freq > 0 && freq != oper_freq &&
+			    wpa_s->num_multichan_concurrent < 2) {
+				wpa_printf(MSG_DEBUG, "P2P: Cannot start P2P group "
+					   "on %u MHz while connected on another "
+					   "channel (%u MHz)", freq, oper_freq);
+				return -2;
+			}
+			wpa_printf(MSG_DEBUG, "P2P: Trying to force us to use the "
+				   "requested channel (%u MHz)", freq);
+			force_freq = freq;
+		} else if (oper_freq > 0 &&
+			   !p2p_supported_freq(wpa_s->global->p2p, oper_freq)) {
+			if (wpa_s->num_multichan_concurrent < 2) {
+				wpa_printf(MSG_DEBUG, "P2P: Cannot start P2P group "
+					   "while connected on non-P2P supported "
+					   "channel (%u MHz)", oper_freq);
+				return -2;
+			}
+			wpa_printf(MSG_DEBUG, "P2P: Current operating channel "
+				   "(%u MHz) not available for P2P - try to use "
+				   "another channel", oper_freq);
+			force_freq = 0;
+		} else if (oper_freq > 0) {
+			wpa_printf(MSG_DEBUG, "P2P: Trying to force us to use the "
+				   "channel we are already using (%u MHz) on another "
+				   "interface", oper_freq);
+			force_freq = oper_freq;
+			pref_freq = oper_freq;
+		}
+	} else {
+#endif
 	res = wpas_p2p_setup_freqs(wpa_s, freq, &force_freq, &pref_freq,
 				   go_intent == 15);
 	if (res)
 		return res;
 	wpas_p2p_set_own_freq_preference(wpa_s,
 					 force_freq ? force_freq : pref_freq);
+#ifdef CONFIG_ANDROID_HAL
+	}
+#endif
 
 	wpa_s->create_p2p_iface = wpas_p2p_create_iface(wpa_s);
 
@@ -6418,6 +6558,33 @@ static int wpas_p2p_init_go_params(struc
 	params->role_go = 1;
 	params->ht40 = ht40;
 	params->vht = vht;
+#ifdef CONFIG_ANDROID_HAL
+	/* check if we have connected on some channel using other interface
+	IF so the GO must setup on the shared freq
+	*/
+	if (wpas_is_driver_type(HAL_DRIVER_ID_MTK)) {
+		int shared_freq = wpa_drv_shared_freq(wpa_s);
+		if (shared_freq) {
+			freq = shared_freq;
+			wpa_printf(MSG_DEBUG, "P2P: Using freq %d used on other interface", freq);
+
+			u8 channel, scc_op_class;
+			channel = scc_op_class = 0;
+			p2p_freq_to_channel(shared_freq, &scc_op_class, &channel);
+			if (channel && scc_op_class) {
+				wpa_printf(MSG_DEBUG, "P2P: update op channel and op class %d/ %d",
+					   channel, scc_op_class);
+				struct p2p_data *p2p = wpa_s->global->p2p;
+				p2p->op_channel = channel;
+				p2p->op_reg_class = scc_op_class;
+				p2p->channels.reg_classes = 1;
+				p2p->channels.reg_class[0].channels = 1;
+				p2p->channels.reg_class[0].reg_class = p2p->op_reg_class;
+				p2p->channels.reg_class[0].channel[0] = p2p->op_channel;
+			}
+		}
+	}
+#endif
 	if (freq) {
 		if (!freq_included(channels, freq)) {
 			wpa_printf(MSG_DEBUG, "P2P: Forced GO freq %d MHz not "
@@ -7261,6 +7428,9 @@ int wpas_p2p_invite(struct wpa_supplican
 	enum p2p_invite_role role;
 	u8 *bssid = NULL;
 	int force_freq = 0;
+#ifdef CONFIG_ANDROID_HAL
+	int oper_freq = 0;
+#endif
 	int res;
 	int no_pref_freq_given = pref_freq == 0;
 
@@ -7296,10 +7466,64 @@ int wpas_p2p_invite(struct wpa_supplican
 	}
 	wpa_s->pending_invite_ssid_id = ssid->id;
 
+#ifdef CONFIG_ANDROID_HAL
+	if (wpas_is_driver_type(HAL_DRIVER_ID_MTK)) {
+		if (wpa_s->current_ssid && !bssid && wpa_drv_get_bssid(wpa_s, bssid) == 0 &&
+		    wpa_s->assoc_freq)
+			oper_freq = wpa_s->assoc_freq;
+		else {
+			oper_freq = wpa_drv_shared_freq(wpa_s);
+			if (oper_freq < 0)
+				oper_freq = 0;
+		}
+
+		if (freq > 0) {
+			if (!p2p_supported_freq(wpa_s->global->p2p, freq)) {
+				wpa_printf(MSG_DEBUG, "P2P: The forced channel "
+					   "(%u MHz) is not supported for P2P uses",
+					   freq);
+				return -3;
+			}
+
+			if (oper_freq > 0 && freq != oper_freq &&
+			    wpa_s->num_multichan_concurrent < 2) {
+				wpa_printf(MSG_DEBUG, "P2P: Cannot start P2P group "
+					   "on %u MHz while connected on another "
+					   "channel (%u MHz)", freq, oper_freq);
+				return -2;
+			}
+			wpa_printf(MSG_DEBUG, "P2P: Trying to force us to use the "
+				   "requested channel (%u MHz)", freq);
+			force_freq = freq;
+			pref_freq  = freq;
+		} else if (oper_freq > 0 &&
+			   !p2p_supported_freq(wpa_s->global->p2p, oper_freq)) {
+			if (wpa_s->num_multichan_concurrent < 2) {
+				wpa_printf(MSG_DEBUG, "P2P: Cannot start P2P group "
+					   "while connected on non-P2P supported "
+					   "channel (%u MHz)", oper_freq);
+				return -2;
+			}
+			wpa_printf(MSG_DEBUG, "P2P: Current operating channel "
+				   "(%u MHz) not available for P2P - try to use "
+				   "another channel", oper_freq);
+			force_freq = 0;
+		} else if (oper_freq > 0) {
+			wpa_printf(MSG_DEBUG, "P2P: Trying to force us to use the "
+				   "channel we are already using (%u MHz) on another "
+				   "interface", oper_freq);
+			force_freq = oper_freq;
+			pref_freq  = oper_freq;
+		}
+	} else {
+#endif
 	res = wpas_p2p_setup_freqs(wpa_s, freq, &force_freq, &pref_freq,
 				   role == P2P_INVITE_ROLE_GO);
 	if (res)
 		return res;
+#ifdef CONFIG_ANDROID_HAL
+	}
+#endif
 
 	if (wpa_s->global->p2p_disabled || wpa_s->global->p2p == NULL)
 		return -1;
Index: wpa-2.4/wpa_supplicant/dbus/fi.w1.wpa_supplicant1.service.in
===================================================================
--- wpa-2.4.orig/wpa_supplicant/dbus/fi.w1.wpa_supplicant1.service.in
+++ wpa-2.4/wpa_supplicant/dbus/fi.w1.wpa_supplicant1.service.in
@@ -1,5 +1,5 @@
 [D-BUS Service]
 Name=fi.w1.wpa_supplicant1
-Exec=@BINDIR@/wpa_supplicant -u -s -O /run/wpa_supplicant
+Exec=/bin/sh -c 'if [ -r /system/etc/ubuntu/device_environment ]; then . /system/etc/ubuntu/device_environment; export ANDROID_HAL_WIFI_DRIVER_ID; fi; exec @BINDIR@/wpa_supplicant -u -s -O /run/wpa_supplicant'
 User=root
 SystemdService=wpa_supplicant.service
